import asyncio
import tempfile
import os
from typing import Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from src.services.openai_service import OpenAIService
from src.services.user_service import UserService
from src.models.enhancement import EnhancementType, EnhancementResponse


class BotHandlers:
    """–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.openai_service = OpenAIService()
        self.user_service = UserService()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Prompt Enhancer Bot!**

–Ø –ø–æ–º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –≤–∞—à–∏ —Ç–µ–∫—Å—Ç—ã –∏ –ø—Ä–æ–º–ø—Ç—ã:

üìù **–£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞** - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏, —É–±–∏—Ä–∞–Ω–∏–µ —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤
üöÄ **–£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞** - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (Cursor, ChatGPT)
‚öôÔ∏è **–ö–∞—Å—Ç–æ–º–Ω—ã–µ —É–ª—É—á—à–∞—Ç–µ–ª–∏** - –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É–ª—É—á—à–µ–Ω–∏—è

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/settings - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —É–ª—É—á—à–∞—Ç–µ–ª—è–º–∏
/help - —Å–ø—Ä–∞–≤–∫–∞

–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞! üéØ
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–¢–∏–ø—ã —É–ª—É—á—à–µ–Ω–∏–π:**

üî§ **–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ —Å—Ç–∏–ª—å**
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
- –£–ª—É—á—à–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
- –£–±–∏—Ä–∞–Ω–∏–µ —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤
- –£–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

üéØ **–£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Cursor, ChatGPT, Claude

‚öôÔ∏è **–ö–∞—Å—Ç–æ–º–Ω—ã–µ —É–ª—É—á—à–∞—Ç–µ–ª–∏**
- –î–æ 3 –≤–∞—à–∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ /settings

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 60 —Å–µ–∫)

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
- –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
- –î–æ 3 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–ª—É—á—à–∞—Ç–µ–ª–µ–π
        """
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        custom_enhancers = self.user_service.list_custom_enhancers(user_id)
        
        if not custom_enhancers:
            text = "üîß **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–ª—É—á—à–∞—Ç–µ–ª–µ–π**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–ª—É—á—à–∞—Ç–µ–ª–µ–π."
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ª—É—á—à–∞—Ç–µ–ª—å", callback_data="add_enhancer")]
            ]
        else:
            text = "üîß **–í–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —É–ª—É—á—à–∞—Ç–µ–ª–∏:**\n\n"
            keyboard = []
            
            for enhancer in custom_enhancers:
                text += f"‚Ä¢ **{enhancer.name}**\n"
                if enhancer.description:
                    text += f"  _{enhancer.description}_\n"
                text += "\n"
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå {enhancer.name}", 
                        callback_data=f"remove_enhancer:{enhancer.id}"
                    )
                ])
            
            if len(custom_enhancers) < 3:
                keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ª—É—á—à–∞—Ç–µ–ª—å", callback_data="add_enhancer")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞
        text_type = await self.openai_service.analyze_text_type(text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —É–ª—É—á—à–µ–Ω–∏—è
        keyboard = []
        
        if text_type == "prompt":
            keyboard.append([
                InlineKeyboardButton("üöÄ –£—Å–∏–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data=f"enhance:prompt_enhancement:{user_id}")
            ])
        
        keyboard.append([
            InlineKeyboardButton("üî§ –£–ª—É—á—à–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É", callback_data=f"enhance:grammar:{user_id}")
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —É–ª—É—á—à–∞—Ç–µ–ª–∏
        custom_enhancers = self.user_service.list_custom_enhancers(user_id)
        for enhancer in custom_enhancers:
            keyboard.append([
                InlineKeyboardButton(
                    f"‚öôÔ∏è {enhancer.name}", 
                    callback_data=f"enhance:custom:{user_id}:{enhancer.id}"
                )
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üìù **–í–∞—à —Ç–µ–∫—Å—Ç:**\n\n{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        voice = update.message.voice
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if voice.duration > 60:
            await update.message.reply_text(
                "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(voice.file_id)
            
            with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_file:
                await file.download_to_drive(temp_file.name)
                temp_path = temp_file.name
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            transcribed_text = await self.openai_service.transcribe_audio(temp_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{transcribed_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞
            text_type = await self.openai_service.analyze_text_type(transcribed_text)
            
            if text_type == "prompt":
                keyboard.append([
                    InlineKeyboardButton("üöÄ –£—Å–∏–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data=f"enhance:prompt_enhancement:{user_id}")
                ])
            
            keyboard.append([
                InlineKeyboardButton("üî§ –£–ª—É—á—à–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É", callback_data=f"enhance:grammar:{user_id}")
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —É–ª—É—á—à–∞—Ç–µ–ª–∏
            custom_enhancers = self.user_service.list_custom_enhancers(user_id)
            for enhancer in custom_enhancers:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚öôÔ∏è {enhancer.name}", 
                        callback_data=f"enhance:custom:{user_id}:{enhancer.id}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                f"üìù **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{transcribed_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}")
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("enhance:"):
            await self._handle_enhancement_callback(query, data)
        elif data == "add_enhancer":
            await self._handle_add_enhancer_callback(query)
        elif data.startswith("remove_enhancer:"):
            await self._handle_remove_enhancer_callback(query, data)
        elif data == "back_to_main":
            await self._handle_back_to_main_callback(query)
    
    async def _handle_enhancement_callback(self, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        parts = data.split(":")
        enhancement_type = parts[1]
        user_id = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = query.message.text
        text_start = message_text.find("**–í–∞—à —Ç–µ–∫—Å—Ç:**\n\n") + 15
        text_end = message_text.find("\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:")
        
        if text_start == -1 or text_end == -1:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            text_start = message_text.find("**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n") + 22
            text_end = message_text.find("\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è:")
        
        if text_start == -1 or text_end == -1:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
            return
        
        original_text = message_text[text_start:text_end].strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await query.message.reply_text("üîÑ –£–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç...")
        
        try:
            if enhancement_type == "custom":
                enhancer_id = parts[3]
                custom_enhancer = self.user_service.get_custom_enhancer(user_id, enhancer_id)
                if not custom_enhancer:
                    await processing_msg.edit_text("‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–π —É–ª—É—á—à–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                response = await self.openai_service.enhance_text(
                    original_text, 
                    EnhancementType.CUSTOM, 
                    custom_enhancer.prompt
                )
            else:
                response = await self.openai_service.enhance_text(
                    original_text, 
                    EnhancementType(enhancement_type)
                )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            enhancement_names = {
                "grammar": "üî§ –£–ª—É—á—à–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
                "prompt_enhancement": "üöÄ –£—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞",
                "custom": "‚öôÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ"
            }
            
            result_text = f"""
{enhancement_names.get(enhancement_type, "–£–ª—É—á—à–µ–Ω–∏–µ")}

üìù **–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:**
{original_text}

‚ú® **–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**
{response.enhanced_text}
            """
            
            await processing_msg.edit_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è: {str(e)}")
    
    async def _handle_add_enhancer_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ª—É—á—à–∞—Ç–µ–ª—è"""
        await query.edit_message_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–ª—É—á—à–∞—Ç–µ–ª—è**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`/add_enhancer –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/add_enhancer –§–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å|–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å|–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ`",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _handle_remove_enhancer_callback(self, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–ª—É—á—à–∞—Ç–µ–ª—è"""
        enhancer_id = data.split(":")[1]
        user_id = query.from_user.id
        
        success = self.user_service.remove_custom_enhancer(user_id, enhancer_id)
        
        if success:
            await query.edit_message_text("‚úÖ –£–ª—É—á—à–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–ª—É—á—à–∞—Ç–µ–ª—å")
    
    async def _handle_back_to_main_callback(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            "ü§ñ **Prompt Enhancer Bot**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_add_enhancer_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ª—É—á—à–∞—Ç–µ–ª—è"""
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/add_enhancer –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        command_text = " ".join(context.args)
        parts = command_text.split("|")
        
        if len(parts) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–º–ø—Ç:\n"
                "`/add_enhancer –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        name = parts[0].strip()
        description = parts[1].strip() if len(parts) > 2 else None
        prompt = parts[2].strip() if len(parts) > 2 else parts[1].strip()
        
        user_id = update.effective_user.id
        success = self.user_service.add_custom_enhancer(user_id, name, prompt, description)
        
        if success:
            await update.message.reply_text(f"‚úÖ –£–ª—É—á—à–∞—Ç–µ–ª—å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–ª—É—á—à–∞—Ç–µ–ª–µ–π (3)") 